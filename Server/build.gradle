/*
 * Copyright (c) 2014 Jakob Wenzel, Ramon Wirsch.
 *
 * This file is part of RallyeSoft.
 *
 * RallyeSoft is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RallyeSoft is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RallyeSoft. If not, see <http://www.gnu.org/licenses/>.
 */

import java.text.SimpleDateFormat

plugins {
	id 'org.hidetake.ssh' version '1.1.3'
	id 'java'
	//id 'application'
	id 'war'
	id 'org.akhikhl.gretty' version '1.2.2'
}

repositories {
	mavenCentral()
}

//Our files are Unicode. Always.
compileJava.options.encoding = 'UTF-8'
//applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

//mainClassName = "de.rallye.StadtRallye"

task buildInfo {
	group "Build"
	description "Add Build info (git infos) to buildDir"
	ext.destinationDir = file("$buildDir/resources/main/META-INF")
	doLast {

		def cmd = "git rev-parse --short HEAD"
		def proc = cmd.execute()
		def revision = proc.text.trim()

		cmd = "git rev-parse --abbrev-ref HEAD"
		proc = cmd.execute()
		def branch = proc.text.trim()

		cmd = 'git status --porcelain'
		proc = cmd.execute()
		def output = proc.text.trim()
		def dirty = false

		output.eachLine {
			if (!it.startsWith("??"))
				dirty = true;
		}

		if (dirty) {
			revision = revision+ "-DEV"
		}


		def sdf = new SimpleDateFormat()
		sdf.applyPattern("dd.MM.yyyy '-' HH\\:mm\\:ss z")
		def time = sdf.format(new Date())



		destinationDir.mkdirs()


		ext.infoFile = file(destinationDir.getAbsolutePath() + '/buildInfo.properties')
		def content = "git.commit.branch="+ branch +"\ngit.commit.id.revision=" + revision + "\ngit.build.time=" + time + "\n"
		infoFile.write(content)
	}
}

task copyLicense(type: Copy) {
	group "Build"
	description "Add License Information to buildDir"
	from '../COPYING'
	into "$buildDir/resources/main/META-INF"
}

processResources {
	it.dependsOn buildInfo, copyLicense
}

task collectDependencies(type: Copy) {
	group "Other"
	description "Collect all library jars required to run the Server inside buildDir/libs/lib"
    into "$buildDir/libs/lib"
    from configurations.runtime
}

jar.dependsOn processResources

jar {
	archiveName 'rallye-server.jar'

	doFirst {

		manifest {
			attributes 'Main-Class' : mainClassName
			attributes 'Class-Path': configurations.runtime.collect { 'lib/'+it.getName() }.join(' ')
		}
    }
}

war.dependsOn processResources

war {

}


gretty {
	contextPath ''
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext {
	jerseyVersion = 2.17
}

/**
 * Basically all Jersey and jackson json libs are part of glassfish. "providedCompile" compiles against our version, but does not pack them into the .war file
 * TODO: deploy libs as user libs statically to target server, let .war only contain stuff that is not in maven => WAY FASTER DEPLOYMENT
 */
dependencies {

	providedCompile 'com.drewnoakes:metadata-extractor:2.8.+'

	providedCompile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion" // For standalone deployment (!There are code dependencies, inside the code that is not used for servlets...)
	providedCompile "org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion" // For servlet based deployment
	providedCompile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
	providedCompile "org.glassfish.jersey.media:jersey-media-multipart:$jerseyVersion"

	providedCompile "org.glassfish.jersey.ext:jersey-mvc-mustache:$jerseyVersion"

	providedCompile 'org.glassfish.grizzly:grizzly-http-server:2.3.+' // For standalone

	providedCompile 'org.glassfish.grizzly:grizzly-websockets:2.3.+' // For standalone

	//compile 'org.glassfish.grizzly:grizzly-http-servlet:2.3.+' //Needed for websockets (standalone)
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'


	//Jackson
	providedCompile 'com.fasterxml.jackson.core:jackson-annotations:2.5.+'
	providedCompile 'com.fasterxml.jackson.core:jackson-databind:2.5.+'
	providedCompile 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.5.+'

	// Jackson Smile support (binary JSON)
	providedCompile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-smile-provider:2.5.+'
	providedCompile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-xml-provider:2.5.+'

	//MySQL
	providedCompile 'mysql:mysql-connector-java:5.1.+'
	providedCompile 'com.mchange:c3p0:0.9.5'


	//Log4j
	//compile 'org.apache.logging.log4j:log4j-api:2.+'
	providedCompile 'org.apache.logging.log4j:log4j-core:2.+'
	providedCompile 'org.apache.logging.log4j:log4j-web:2.+'
	//compile 'javax.jmdns:jmdns:3.4.1'// log4j + chainsaw

	// Google Cloud Messaging (deprecated)
	providedCompile 'com.ganyo:gcm-server:1.+'

	// Primitive JSON (used in Push service)
	providedCompile 'org.json:json:20141113'

	providedCompile 'commons-io:commons-io:2.4'
	//compile 'com.google.inject:guice:3.0'

	providedCompile 'org.apache.xmlgraphics:batik-codec:1.7'
	providedCompile ('org.apache.xmlgraphics:batik-rasterizer:1.7') {
		exclude group: 'fop', module: 'fop'
	}
	providedCompile 'org.jdom:jdom:2.0.2'

	//Testing
	testCompile 'junit:junit:4.12'
	testCompile 'org.apache.httpcomponents:httpclient:4.4'

	compile project(':common:RallyeStructures')
}


if (file("$rootProject.projectDir/local/remotes.gradle").exists()) {
	apply from: "$rootProject.projectDir/local/remotes.gradle"

	task deploy(type: SshTask, dependsOn: assemble) {
		session(remotes[0]) {
			execute './rallye.sh stop'

			put "$buildDir/libs/$jar.archiveName", 'server'

			execute './rallye.sh start'
		}
	}
	task deployLibs(type: SshTask, dependsOn: [assemble, collectDependencies]) {
		session(remotes[0]) {

			execute './rallye.sh stop'

			execute 'rm -r server/lib; true'
			put "$buildDir/libs/lib", 'server'

			execute './rallye.sh start'
		}
	}
	task deployAll(type: SshTask, dependsOn: [assemble, collectDependencies]) {
		session(remotes[0]) {

			execute './rallye.sh stop'

			put "$buildDir/libs/$jar.archiveName", 'server'
			execute 'rm -r server/lib; true'
			put "$buildDir/libs/lib", 'server'

			execute './rallye.sh start'
		}
	}
}
